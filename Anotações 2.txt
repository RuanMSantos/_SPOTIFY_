Refatorar -> Tornar o código melhor, e mais eficiente fazendo exatamente a mesma função de antes.

Para refatorar o Main que estava cheio de código duplicado é necessário criar um componente onde será colocado o item-list (lista de itens)
desta forma, no main será necessário apenas chamar o componente ItemList.

Com o componente criado, é necessário importá-lo para o Main e chamá-lo, nesse caso usando Self closing tag.

Depois disso, podemos recortar a div item-list do main e colá-la no Item-list.

Porém, temos um erro de referência. O FontAwesome não foi importado no ItemList, então é necessário importá-lo.

Quando você usa os componente da forma correta, tudo é usado da forma que deveria, tornando o código muito mais limpo e não tendo excesso de
imports em um arquivo.

Agora restaram apenas dois componentes importados no Main, com isso, eles são iguais, porém não é o que queremos, por isso temos que passar 
algumas informações que os diferenciam.

Mass antes teos que melhorar o componente ItemList.

O próximo componente que pode ser encontrado dentro de ItemList é o single-item, que também receberá seu arquivo específico.

Agora o código melhora drasticamente, onde no ItemList apenas importamos o componente 5 vezes, assim como no Main importamos o ItemList
2 vezes.

Agora, precisamos diferenciar os dois ItemList, passando informações a eles.
Para isso, os componentes recebem "props", que nada mais são que os parâmetros de uma função, pois o componente nada mais é que 
uma função.

Esses props entram no componente de forma semelhante aos atributos do html, exemplo: "<ItemList title="Artistas" />".

Apesar de parecido com os atributos html não são a mesma coisa.

O <StrictMode /> que está no main.jsx tem a função de renderizar duas vezes o seu programa, dessa forma o torna mais robusto e deixa mais
aparente seus erros os duplicando e testa seu código, ele serve apenas na produção e não entra no produto final.

Para acessar todos os props em uma função, basta passar o parâmetro props, agora podemos usar console.log(props), por exemplo, que
retornará um objeto com os valores.

Como o props foi passado no ItemList, deve ser acessado dentro do componente/função ItemList.

Para acessar a chave no objeto temos duas formas, primeira mente podemos guardar o obj em uma variavel -> const obj = { title: Artistas }.
Após isso, temos as duas formas de acessar a chave:
obj.title
obj["title"]

Então, para acessar esses valores na função usariamos o props, exemplo:

const ItemList = (props) => {
	console.log(props.title);
};

Porém, essa forma não é usual, pois no props podem ter muitos valores, pois ele é um objeto.

Com isso usamos o conceito de desestruturação, que consiste em pegar apenas uma parte do objeto. Isso já foi apresentado anteriormente,
nos imports, como no exemplo: 

import { StrictMode } from "react";

Aqui estamos pegando apenas o StrictMode do objeto react.

No exemplo de uma variavel ficaria: const { title } = { title: "Artistas" } (Pegamos apenas o title do obj).

Então dentro do componente a forma de escrita fica facil e resumida:

const ItemList = ({title}) => {
	console.log(title);
};

Dessa forma estou pegando apenas o title do props.

Agora substituindo o que estava escrito no título do item list pela variavel, desta forma:
<h2>{title} populares</h2>
funcionará corretamente, lembrando que para escrever js no html em react, usasse chaves.

A aplicação funcionou pois agora ele está exibindo a variável title, que foi alterada em cada exibição no componente chamado no main.

Agora, precisamos também passar a quantidade de itens que existirá em cada um, pois não são iguais, aqui funciona da mesma forma, porém
com um pequeno detalhe, não queremos passar o props como string, pra isso temos que escrever entre chaves ao inves de aspas,
assim ele entende que é um elemento js e não um html que são texto. Ficaria assim: items={10}.

Após isso temos que importá-lo na function, para isso é simples, apenas colocar a variavel separada por vírgula.
const ItemList = ({title, items}) => {
	console.log(items);
};

Uma forma de resolver o problema seria com o operador ternário:
<div>
{ items === 5 ? (repete o componente 5 vezes) : (repete o componente 10 vezes); }
(lembrando que temos que colocar as chaves pois é js, e quando formos retornar os componentes será necessário colocá-lo em um fragmento
<></>)
</div>

Porém, essa forma foi só um exemplo, pois não é nada funcional.

Também é possível fazer isso utilizando o for.

Outra for de utilizar laços no js é utilizando o map, vamos dar um exemplo com array:
const myArray = [1, 2, 3, 4, 5];
myArray.map(() => {});

O map entra em cada elemento e faz para cada um deles o que for determinado na função.
Uma vantagem do map, é que ele ja te da um outro array, diferente do for comum, a não ser que você o crie.

myArray.map((currentValue, index) => currentValue);

currentValue é o próprio valor do elemento, nesse caso em cada passagem ele veria o valor do elemento e o retornaria, assim como é possível
manipulá-los.

Com isso, podemos usar um map e um array que tenha um tamanho exatamente igual ao meu items para retornar em cada passagem, o single item.

Utilizando Array(5), cria-se um array de tamanho 5, porém o valor de todas as posições é empty, o que nos empede de usar o map.

Com isso precisamos fazer com que as posições tenham algum valor, mesmo que seja undefined. Para isso podemos escrevem da seguinte forma,
ja utilizando item:

Array(item).fill().map(() => {});

fill() -> preencher.

{Array(items).fill().map(() => <SingleItem />)}

Agora escrevendo dessa forma tudo funciona perfeitamente e de forma dinâmica.

Escrito entre chaves pois é js, Array(items) dita o tamanho do array, fill preenche as posições, map retorna para cada índice um componente.

Após aplicar, acontecerá um erro, o react pede para que você defina chaves únicas como prop para cada componente que foi retornado no array,
com isso facilita e aumenta ainda mais a velocidade e precisão nas renderizações e alterações do react.

Esse prop será chamado de key.

Para isso, pode se usar o índice do array no componente:
{Array(items).fill().map((currentValue, index) => <SingleItem key={index} />)}
porém acaba não se tornando único pelo fato de nos dois Item list existirem os mesmos índices.

Para isso podemos juntar o title com o índice, dessa forma tornando-o único.

É possível de duas formas:
{Array(items).fill().map((currentValue, index) => (<SingleItem key={title + index} />))}
Porém concatenar acaba não sendo muito usual, por isso será usado o template string.

`${title}-${index}`, dessa forma. (Artistas-0 - exemplo).

NÃO ESQUEÇA DE COLOCAR O CURRENTVALUE NO MAP, MESMO QUE USE SÓ O INDEX.

A partir daqui a dispozição do código ja melhorou absurdamente.

Existem dois documentos .js que contém informações, um sobre artistas e um sobre músicas. Esses asquivos contém um array de objetos com 
informações sobre determinado assunto.

Quando exportamos um componente, sem ser default, é necessário colocá-lo entre chaves, pos estamos exportando um objeto, também é
necessário passar quais chaves dele serão exportadas.

Nos arquivos js também é possível exportar da mesma forma, porém uma terceira forma de exportar, é colocando o export antes do que será 
exportado.
export const artistArray = [{}];

Por padrão exporta-se componentes no final.

O import com chaves, geralmente está relacionado em pegar algo de um arquivo específico e não de um objeto, com isso é possível usar
vírgula e colocar vários imports dentro da chave.

Agora ao invés de usar Array(items) para retornart uma quantidade de itens, usaremos o array de artistas. Com isso teremos um pequeno erro,
como não limitamos o array, serão retornados a quantidade de índices que existem no array.

Para isso, antes de mapear, precisamos filtrar a quantidade que queremos ter. O comando filter funciona a partir de uma condição,
mantendo apenas o verdadeiro. 

Com isso, usaremos o filter e só após o map que retorna um array, e para cada índice faz algo.

Dessa forma, garantimos que todos os itens estão sendo puxados, porém, nem todos estão sendo exibidos.

{artistArray
          .filter((currentValue, index) => index < items)
          .map((currentValue, index) => (
            <SingleItem key={`${title}-${index}`} />
          ))}

O filter retorna uma função da mesma forma que o map, com isso é possível puxar o currentValue e index, conforme, serão filtrados a quantidade
de índices que forem menor que a props items, com isso garantindo a quantidade exata.

Vamos mudar o nome do currentValue do map, para ficar mais intuitivo, não é obrigatório ter o mesmo nome sempre.

O currentValue retorna o próprio elemento, então no caso de retornar um objeto, é posssível acessar suas chaves.
Enquanto o index é responsável por retornar a posição do elemento no array.

Agora, passamos os valores das chaves como props no SingleItem, para assim acessar as informações em seu arquivo.

Existem duas formas, a primeira é passar tudo de forma manual:

<SingleItem
              id={currObj.id}
              name={currObj.name}
              image={currObj.image}
              banner={currObj.banner}
              key={`${title}-${index}`}
            />\

Nesse caso, para cada índice do array, será pego seu próprio id, name, image e banner.

Agora, no SingleItem, colocaremos entre chaves os nomes das props, para assim conseguir acessá-las no componente.

Agora que já adicionados, colocaremos eu seus devidos lugares, como por exemplo, na tag h2 que fica o nome, entra a props name.

Um exemplo legal, é no src do img, que entra o props {image}, que nada mais é que dentro do obj, um link da imagem.

Dessa forma, ja temos um resultado. Todos os itens já tem um artista, foto e nome, porém, um pequeno problema, na parte de músicas está
sendo exibido artistas.

Isso ocorre porque no ItemList esta sempre sendo puxado o artistArray, o que não diferencia as músicas de artistas.

Agora vamos aprender a forma mais pratica de criar os props do SingleItem.

Como ja sabemos, dizer que uma váriavel tem o mesmo valor de um obj, apenas cria um endereço nela, o que torna possível alterar o obj
através dela. Isso geralmente não é uma boa prática, para pegar os valores usamos um novo operador:

Spread operator (...).

Com isso podemos escrever por exemplo:

const obj = {name: "objeto"};

const objNovo = {...obj}.

Escrevendo entre chaves e com 3 pontos antes, utilizamos o Spread operator, que nos permite invez de criar um endereço, criar uma
variavel com os mesmos valores do objeto. Agora mudar o valor da variavel não altera o valor do outro objeto

ISSO TAMBÉM FUNCIONA COM ARRAY.

Com isso, agora no props, invez de passar quatro valores diferentes, criamos apenas um props, que vai ser o objeto inteiro.

<SingleItem {...currObj} key={`${title}-${index}`} />

Dessa forma eu retorno o objeto inteiro, que é o próprio currentValue, é necessário usar o Spread operator, pois criamos uma prop
com os mesmos valores do obj, e utilizar apenas um endereço gera um erro.

No fim, os props são recebidos da mesma forma no componente, com o nome igual as chaves.`

Agora para resolver o problema de diferenciação entre as listas, mimportamos os dois arrays, criamos um props onde cada componente vai 
receber um array diferente, e só usamos esse props no componente do SingleIem, simplesmente assim.

Criamos a props items array e colocamos os arrays dentro deles: itemsArray={artistArray}.

Porém, só fazer isso não vai funcionar, pois temos que utilizá-lo no componente. Agora é só passar seu nome como parâmetreo entre chaves,
e substituir o array anterior.

Agora, temos outro problema para resolver. Tirar o nome "artista", das músicas.

Os dois objetos tem algumas diferenças, o objeto de artista não tem a chave artist por exemplo. Com isso podemos puxar essa props no componente 
SingleItem.

A props recebida por ele é um objeto, (um dos dois) com isso pode ou não ter essa chave. Caso não tenha, ela virá com o valor undefined.

Com essa lógica, podemos usar o operador ternário, onde: {artist === undefined ? "Artista" : artist}

Se o valor da chave artist for undefined, significa que estamos no objeto artista, então mostre "Artista", se não exiba o valor da chave
artist, que contém o nome do artista.

Porém, fazer dessa forma é muito repetitivo, então existe uma forma melhor.

{artist ?? "Artista"}

os dois sinais de interrogação testam se aquilo existe, se sim usa ele, se não usa "Artista".

Sabemos que quando testamos um valor sem passar uma condição ele retorna verdadeiro ou faço com base no valor ser vazio ou existente.

Agora temos um código mil vezes melhor.

Porém, temos outro problema, na verdade o item é um link que nos leva para outro lugar, com isso temos que mudar no componente.

Uma vantagem absurda é que, por estarmos usando componentes é necessários alterar apenas uma vez que todos serão alterados.

Apenas transformamos a div principal em link que tudo da certo, passamos também seu href.

Agora todo o componente é um link.

Agora vamos colocar link no mostrar tudo.

Os dois normalmente levariam para o mesmo lugar, por isso teremos que usar props, dessa vez não é necessário ser em js, como é um link podemos
apenas escrever em texto.

O nome do prop vai ser path (caminho). -> exemplo: path="/songs".

A barra no link, significa que vai ser adicionada uma barra antes do link na url.

Agora é só usar a variável no href.

Agora vamos colocar links nos itens. Os links são acompanhados por artist ou song e o id.

Para isso criamos uma prop no ItemList com o link da primeira parte (exemplo: song).

Agora algo interessante acontece, o link precisa chegar no SingleItem, para isso utilizamos o ItemList apenas para enviar essa informação
para o SingleItem. É só importar no ItemList e criar um prop no SingleItem com o nome dessa variavel.

Ampas as props tem o mesmo nome, para facilitar.

Agora no link do SingleItem, Pssamos o idPath que é primeiro nome, e o id do obj que ja foi importado como prop. (href={`${idPath}/${id}`}).

Agora tudo esta certo (exemplo: artist/4).

Porém existe um problema, quando clicamos em um link ele recarrega a página e tamém não muda as coisas de lugar. Recarregar a página acaba com
a magia do react, o correto é ele apenas rerrenderizar as páginas, mantendo sua alta velocidade.

Para arrumar isso precisamos mexer no App, criando uma estrutura de páginas.

Precisamos instalar um pacote que nos permite fazer isso.

npm i react-router-dom

Essa biblioteca vai permitir criar as rotas das páginas diferentes que vamos fazer.

Agora precisamos importar.

import { BrowserRouter, Routes, Route } from "react-router-dom";

Routes -> São minhas rotas
Route -> É uma rota específica

Toda estrutura de rotas precisa estar envolvida em um <BrowserRouter><BrowserRouter/>

Que vai gerenciar minhas rotas.

Agora dentro de src podemos criar a pasta pages, que irá conter todas as nossas páginas.

A única página que temos criada até agora é a Home, que contém o "header" e o Main.

Porém o header é algo comum em todas as páginas, por conta disso vai ficar de fora do esquema de rotas, então a única coisa que 
vamos ter é o main.

Com isso vamos importar o componente Main dentro do Home e retorná-lo na função.

Caso tivesse mais algum componente exclusivo do home, poderiamos retorná-lo na função também.

Agora ao invés de retornar o Compenente no app, retornaremos a página, o componente ficará apenas dentro de onde ele precisa estar.

Já no app, o Header vai ficar fora do sistema de rotas, mas dentro do BrowserRouter.

Dentro do BrowserRouter temos as Routes que são as rotas que vão involver todos que vão ficar la dentro que são as rotas específicas.

Dentro das Routes ficam as Route (rota específica).

Na route temos que passar duas informações, qual é o caminho específico daquela rota (url) e qual componente será renderizado quando
entrarmos na url, que neste caso é a página home.

        <Route path="/" element={<Home />} />

Não esqueça de importar Home.

Agora o Main se torna inútil em app, pois ele já está onde deveria, no Home por exemplo.

Após isso, temos que fazer o mesmo com todas as pages, passar sua url de resposta e qual componente/page será renderizado.

Porém tem um detalhe as páginas /artist e /song são sempre acessadas acompanhadas de um id, para representar o id ao inves do texto
"id" é necessário colocá-lo acompanhado de dois pontos, ficando assim: /:id -> /artist/:id. Com esses pontos, o url entende que o que entra ali
será uma variavel iddentificada como id.

Lembrando que o header existirá em cada uma das páginas, pois ele está fora do esquema de rotas.

Para explicar melho como funciona, o link é descrito no SingleItem, ele especifica qual o link daquele elemento, já nas Rotas, exista a rota
que atende a essa url, dizendo que se caso a url for a mesma do SingleItem juntamente do id, iremos chegar naquela página.

Pra finalizar, falta apenas uma coisa, toda vez que entrammos em uma nova url, essa url atualiza a página, o que estraga o react, isso
ocorre pois estamos usando uma âncora (<a></a>), para resolvermos isso, precisamos utilizar a "âncora" do react-router-dom, que nos permite
navegar entre as páginas por dentro do documento, apenas renderizando novamente o que é necessário sem atualizar a página, extraindo o suco do
react.

Para fazer isso é bem fácil, apenas trocar todas as "âncoras" por "Link" e todos os "href" por "to", porém sem esquecer de importar:

import { Link } from "react-router-dom";

Ctrl + Shift + f -> pesquisar por todo documento

